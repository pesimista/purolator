// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9xYbW/bthP/KgL/Bf4vJluOk3aDgAHLkqAIMKRBnK0v2gw4U2eJjUSyFGUnCPTdB1LP",
	"D5Xr1QW2vbIi3sPv7n68O+WFUJFIwZHrlPgvJKURJmAfz4NAYWofpRISlWZo/6JMP5tf/SyR+CTVivGQ",
	"uORpJkCyGRUBhshn+KQVzDSEVmkLMQtAG4UEnn4+XZDcaqgAFfHPctcCAf7NlpddyyfWcsa1+pLlQu5N",
	"7hIOCR45sEXuEhkJjjdZsjYv+skEhXAhAutXgtaoOPHJnx8/Bj+8Iu6X8bbi+jvqNa5DFZd5Xp+K9Sek",
	"un36kzErUg1xBeqLhn40okpsGafTgq9z17xF1DfHr89pY7wu0LeYf9OxbpOl8HPGFAbE/1AwrOexE51b",
	"3K5Wahr6dlLbpdVDvya5Sy4UgsZVxGSCXN/h5wxTPSSgVIxrVPdW/YUgzxKD9D5ClUBMXHKHYRZD28c4",
	"G9PS04gLoI8Q4jXfCJWAZoIPZQJMqWKyOpz0JBlSTCfNFSLmiWlM7MMrhRvik/95Tcfzynbn3Rpx0jAb",
	"lILnfaV/SmLik1K1X+kSwMPEZbHERrVlFK8vJ4M2t1ULDfFtHVYRO/EJ4/p02dxYU8zQsqrTXK32e2Rh",
	"pPflopTqB9QgdTvF6iLrepqK3tw8Cc+GMZOVXLM4Zjw8p/YatNroQU2r9tXn+Qp5YNN1hxTZ1j7eR0wF",
	"t6D08yTpFzZDIUs1Kgy+CeDJZFc9s5ynj5ncw3kj0g/wUgn5brMhLrlVuKIRBlmMwTCwSQSvbahFgiYx",
	"QLM0THGs2i2MT3g6Tus9ORnewgrOFBFt77Is+K9Ftmh15Utrrs/Kl7N8Zn6W1c/ea6QV0EfGwzvcoEJO",
	"p7u6qqROhjmwAZXHy+nj0+njs5HjKTa/Gfa2fvnH6e6OjbJejke72tj9na5cH2E1XN3OwB6b+5csQZ6O",
	"D9nq6HfOdLtJMAORJntn/BbiDA8cP4NYCiMu2dkhYaGMxXGllBhZmGm5WO5DkLskwTSFEMfZ0UZEi42q",
	"kh9DU4z5AZroq0ZqU5LcJTHyUEcHqewOGtwu2bHgIA+9dJTuaqiVQbcKdyxBzXLRzdBXUybvMKJFznhN",
	"XPIYjo+sQ4nV3c5zlzC+EQWvuAZaOE6AmdUOJNMIyS/pDsIQ1ZwJUn0kklXxzjm/vXbuERLikkwZpUhr",
	"6XteSyfvLkw+MToboRwdoXObKRGDFur/qWN2dcl46LzHtbMq9i1TBUaRpzaHpfNzCTRCZzlfdNymvuft",
	"drs52OO5UKFX6qbeb9cXVzerq9lyvphHOontgEKVpO82lacR7J4V8UyxmI7bcde4iUu2qIp+Q07mi7n9",
	"wBISOUhGfHJqX5muqCNLCK/qZcXSIoqPkm6Gim8Xp5Z0stTkpXbqXM1MstqJMrun4Z1trtdBbWTVdE5V",
	"fAP9KoLnquLl9wpIGTNqVb1PadE6i3uy7xaNf2VZZnVDuo/Qqd9s0QlAgyM2lgQlMAzqiOekTW2tMrRc",
	"T6Uw1TSglovF0YIoWu0RQFsDG8hi/f2xZRyfJFIDAEsZs3OZDeoDWdUcezCvG855L9UGcyPygngxFqtR",
	"1/wfggXeBXCKsQN1iI6OQDsRpM4akTvUVj9w1pl2uNBWTGIwoKIx1iKiBAUJalQGa99xhc/hdnms0t0g",
	"EM4aHWqRxdYXM2rmfjXtqQlyQCS3lfh+P30YkOxsmJkqkBaGf2TdXRLiSG95i7pd0BjWGA8K9hb1paDZ",
	"Eer1neuz+PfWJy///1GltRhkJH/I/woAAP//rXuBRZYWAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
