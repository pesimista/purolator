// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
